package web

import (
	"github.com/coryo12345/easy-deploy/web/components"
	"github.com/coryo12345/easy-deploy/internal/docker"
	"fmt"
)

templ MonitorPage(items []docker.ConfigStatus) {
	@Base() {
		<header class="border-b w-screen h-12 px-2 fixed top-0 left-0 shadow bg-white flex items-center justify-between">
			<h1 class="text-lg font-semibold"><a href="/monitor">EasyDeploy</a></h1>
			@components.Button(templ.Attributes{
				"class":   "bg-blue-500 text-white",
				"hx-post": "/logout",
			}) {
				Logout
			}
		</header>
		<main class="text-center mt-12 pt-4 px-8">
			@components.Card(components.CardProps{
				Title: "EasyDeploy",
			}, templ.Attributes{
				"class": "!w-full mb-2",
			}) {
				<form hx-post="/monitor/refresh" hx-swap="innerHTML" hx-target="#monitor-items">
					@components.Button(templ.Attributes{
						"class": "bg-gray-200",
						"type":  "submit",
					}) {
						Refresh Config
					}
				</form>
			}
			<div id="monitor-items">
				@MonitorItems(items)
			</div>
		</main>
	}
}

templ MonitorItems(items []docker.ConfigStatus) {
	<ul role="list" class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-2">
		for _, item := range items {
			<li>
				@MonitorItem(item)
			</li>
		}
	</ul>
}

templ MonitorItem(item docker.ConfigStatus) {
	@components.Card(components.CardProps{
		Title:       item.Config.Id,
		Description: fmt.Sprintf("Container name: %s", item.Config.ContainerName),
	}, templ.Attributes{
		"class": "!min-w-[100%]",
	}) {
		if item.Error != nil {
			@components.ErrorMessage("This container could not be found. Perhaps it hasn't been deployed?")
		} else {
			<dl>
				<dt class="font-semibold">Image</dt>
				<dd class="ml-2 mb-1">{ item.Status.Image }</dd>
				<dt class="font-semibold">State</dt>
				<dd class="ml-2 mb-1">{ item.Status.State }</dd>
				<dt class="font-semibold">Status</dt>
				<dd class="ml-2 mb-1">{ item.Status.Status }</dd>
				<dt class="font-semibold">Created At</dt>
				<dd class="ml-2 mb-1">{ item.Status.CreatedAt }</dd>
				<dt class="font-semibold">Ports</dt>
				<dd class="ml-2 mb-1">{ item.Status.Ports }</dd>
				<dt class="font-semibold">Size</dt>
				<dd class="ml-2 mb-1">{ item.Status.Size }</dd>
			</dl>
		}
		<div class="mt-2">
			<form hx-post={ fmt.Sprintf("/monitor/deploy/%s", item.Config.Id) } hx-swap="none">
				@components.Button(templ.Attributes{
					"class": "bg-gray-200",
					"type":  "submit",
				}) {
					Redeploy
				}
			</form>
		</div>
	}
}
